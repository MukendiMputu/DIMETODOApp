// Generated by info.scce.cinco.product.userdocumentation.codegen.SeleniumScriptGenerator
package info.scce.cinco.product.userdoc;

import java.io.File;
import java.time.Duration;
import java.io.IOException;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.OutputType;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;

/**
 * This class is the main entry point of the model-based generated application.
 * Whenever you make some changes to your model and click generate, this class will be
 * automatically regenerated.
 * 
 * It is discouraged to edit this class, since any changes made will be overwritten.
 *
 * @author Mukendi Mputu
 */

@SuppressWarnings("unused")
class SeleniumScreenshotsGenerator {
	// User Credentials
	private static String username;
	private static String password;
	private static String email;
	private static WebDriver firefoxDriver;
	private static WebDriverWait wait;
	// No Selenium Property were specified
	private static WebElement element;
	private static Long DEFAULT_TIMEOUT = 10L;

	private SeleniumScreenshotsGenerator() {
		username = "";
		email = "";
		password = "";
		System.setProperty("webdriver.gecko.driver", "/home/mukendi/opt/WebDriver/bin/geckodriver");
		firefoxDriver = new FirefoxDriver();
		wait = new WebDriverWait(firefoxDriver, Duration.ofSeconds(DEFAULT_TIMEOUT));
		element = null;
	}
	
	// Start of Create New List feature
	static class CreateNewList {
		
		static void runSequence(SeleniumScreenshotsGenerator screenshooter, boolean capture) {
			try {
				// DocNode CreateNewList
				if (capture) {
					UserLogin.runSequence(screenshooter, false);
					screenshooter.highlightElement("input.form-control[placeholder='e.g. Shopping']");
					screenshooter.typeIn("input.form-control[placeholder='e.g. Shopping']", "Shopping");
					wait.until(presenceOfElementLocated(By.cssSelector("input.form-control[placeholder='e.g. Shopping']")));
					screenshooter.takePageScreenshot("CreateNewList", "EnterListName");
					screenshooter.undoHighlightElement("input.form-control[placeholder='e.g. Shopping']");
					screenshooter.clickBtn("button[aria-label='Add List']");
					wait.until(presenceOfElementLocated(By.cssSelector("h1")));
					screenshooter.takePageScreenshot("CreateNewList", "EnterListName");
				} else {
					UserLogin.runSequence(screenshooter, false);
					screenshooter.typeIn("input.form-control[placeholder='e.g. Shopping']", "Shopping");
					screenshooter.clickBtn("button[aria-label='Add List']");
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				// Reset the application state
			}
		}
	}
	
	// Start of Add List Entry feature
	static class AddListEntry {
		
		static void runSequence(SeleniumScreenshotsGenerator screenshooter, boolean capture) {
			try {
				// DocNode AddListEntry
				if (capture) {
					CreateNewList.runSequence(screenshooter, false);
					wait.until(presenceOfElementLocated(By.cssSelector("input[placeholder=\"e.g. grab some apples\"]")));
					screenshooter.highlightElement("input[placeholder=\"e.g. grab some apples\"]");
					screenshooter.typeIn("input[placeholder=\"e.g. grab some apples\"]", "return t-shirt");
					screenshooter.takePageScreenshot("AddListEntry", "AddlistEntry");
					screenshooter.clickBtn("button[aria-label='Add TODO']");
				} else {
					CreateNewList.runSequence(screenshooter, false);
					screenshooter.typeIn("input[placeholder=\"e.g. grab some apples\"]", "return t-shirt");
					screenshooter.clickBtn("button[aria-label='Add TODO']");
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				// Reset the application state
			}
		}
	}
	
	// Start of Add List Owner feature
	static class AddListOwner {
		
		static void runSequence(SeleniumScreenshotsGenerator screenshooter, boolean capture) {
			try {
				// DocNode AddListOwner
				if (capture) {
					CreateNewList.runSequence(screenshooter, false);
					screenshooter.highlightElement("select.form-control");
					screenshooter.highlightElement("select.form-control"); 
					screenshooter.select("select.form-control", "Mary Jane");
					wait.until(presenceOfElementLocated(By.cssSelector("table[class=\"table table-striped table-hover table-condensed\"] > tbody > tr")));
					screenshooter.takePageScreenshot("AddListOwner", "Addinglistowner");
					screenshooter.clickBtn("button[aria-label=\"Add Owner\"]");
				} else {
					CreateNewList.runSequence(screenshooter, false);
					screenshooter.select("select.form-control", "Mary Jane");
					screenshooter.clickBtn("button[aria-label=\"Add Owner\"]");
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				// Reset the application state
			}
		}
	}
	
	// Start of Remove List Owner feature
	static class RemoveListOwner {
		
		static void runSequence(SeleniumScreenshotsGenerator screenshooter, boolean capture) {
			try {
				// DocNode RemoveListOwner
				if (capture) {
					AddListOwner.runSequence(screenshooter, false);
					wait.until(presenceOfElementLocated(By.cssSelector("table[class=\"table table-striped table-hover table-condensed\"] > tbody > tr")));
					screenshooter.highlightElement("button[aria-label=\"Remove Owner\"]");
					screenshooter.takePageScreenshot("RemoveListOwner", "removinglistowner");
					screenshooter.clickBtn("button[aria-label=\"Remove Owner\"]");
				} else {
					AddListOwner.runSequence(screenshooter, false);
					screenshooter.clickBtn("button[aria-label=\"Remove Owner\"]");
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				// Reset the application state
			}
		}
	}
	
	// Start of Delete List Entry feature
	static class DeleteListEntry {
		
		static void runSequence(SeleniumScreenshotsGenerator screenshooter, boolean capture) {
			try {
				// DocNode DeleteListEntry
				if (capture) {
					AddListEntry.runSequence(screenshooter, false);
					screenshooter.highlightElement("table[id^=table] > tbody > tr"); 
					wait.until(presenceOfElementLocated(By.cssSelector("table[class=\"table table-striped table-hover table-condensed\"] > tbody > tr")));
					screenshooter.takePageScreenshot("DeleteListEntry", "removinglistentry");
					screenshooter.clickBtn("button[aria-label='Delete TODO']");
				} else {
					AddListEntry.runSequence(screenshooter, false);
					screenshooter.clickBtn("button[aria-label='Delete TODO']");
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				// Reset the application state
			}
		}
	}
	
	// Start of Delete List feature
	static class DeleteList {
		
		static void runSequence(SeleniumScreenshotsGenerator screenshooter, boolean capture) {
			try {
				// DocNode DeleteList
				if (capture) {
					CreateNewList.runSequence(screenshooter, false);
					screenshooter.highlightElement("div[aria-label='button group']"); 
					screenshooter.takePageScreenshot("DeleteList", "ListSectionhighlighted_");
					screenshooter.clickBtn("button[aria-label='Remove']");
				} else {
					CreateNewList.runSequence(screenshooter, false);
					screenshooter.clickBtn("button[aria-label='Remove']");
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				// Reset the application state
			}
		}
	}
	
	// Start of Login feature
	static class UserLogin {
		
		static void runSequence(SeleniumScreenshotsGenerator screenshooter, boolean capture) {
			try {
				// DocNode UserLogin
				if (capture) {
					screenshooter.goToPage("http://localhost:8080");
					wait.until(presenceOfElementLocated(By.cssSelector("input#username.form-control")));
					screenshooter.takePageScreenshot("Login", "ApplicationLandingPage");
					screenshooter.highlightElement("#username"); 
					screenshooter.typeIn("#username", "peter");
					screenshooter.highlightElement("#password"); 
					screenshooter.typeIn("#password", "pwd");
					screenshooter.clickBtn("body > app > routable-aycj5qmwmeewzvvvwxpyu8a-process > root-home-aycj5qmwmeewzvvvwxpyu8a-process > login-form > div > div > div > div > form > div.row > div > button");
					wait.until(presenceOfElementLocated(By.cssSelector("div.container")));
					screenshooter.takePageScreenshot("Login", "ApplicationLandingPage");
				} else {
					screenshooter.goToPage("http://localhost:8080");
					screenshooter.typeIn("#username", "peter");
					screenshooter.typeIn("#password", "pwd");
					screenshooter.clickBtn("body > app > routable-aycj5qmwmeewzvvvwxpyu8a-process > root-home-aycj5qmwmeewzvvvwxpyu8a-process > login-form > div > div > div > div > form > div.row > div > button");
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				// Reset the application state
			}
		}
	}
	

	public static void main(String[] args) {
		SeleniumScreenshotsGenerator app = new SeleniumScreenshotsGenerator();
		
		app.openBrowser();
		CreateNewList.runSequence(app, true);

		app.closeBrowser();
				AddListEntry.runSequence(app, true);

		app.closeBrowser();
				AddListOwner.runSequence(app, true);

		app.closeBrowser();
				RemoveListOwner.runSequence(app, true);

		app.closeBrowser();
				DeleteListEntry.runSequence(app, true);

		app.closeBrowser();
				DeleteList.runSequence(app, true);

		app.closeBrowser();
				UserLogin.runSequence(app, true);

		app.closeBrowser();
				
	}


	/*================== Selenium Methods ==================*/

	public Boolean openBrowser()
	{
		SeleniumScreenshotsGenerator.firefoxDriver.manage().window().maximize();
		return true;
	}
	public Boolean goToPage(String sSiteURL)
	{
		SeleniumScreenshotsGenerator.firefoxDriver.get(sSiteURL);
		return true;
	}
	public Boolean takePageScreenshot(String folderName, String pictureName) throws IOException
	{
		try {
	        Thread.sleep(1000);
	    } catch (InterruptedException e) {
	        e.printStackTrace();
	    }
		//Use TakesScreenshot method to capture screenshot
		TakesScreenshot screenshot = (TakesScreenshot)SeleniumScreenshotsGenerator.firefoxDriver;
		File source = screenshot.getScreenshotAs(OutputType.FILE);
		FileUtils.copyFile(source, new File("documentation/docs/src/features/"+folderName+"/" + pictureName + ".png"));
		return true;
	}
	public WebElement findPageElement(String selector)
	{
		return SeleniumScreenshotsGenerator.firefoxDriver.findElement(By.cssSelector(selector));
	}
	public void highlightElement(String selector)
	{
		JavascriptExecutor jsExec = (JavascriptExecutor)SeleniumScreenshotsGenerator.firefoxDriver;
		jsExec.executeScript("arguments[0].setAttribute('style','border: 4px solid red;');", findPageElement(selector));
	}
	public void undoHighlightElement(String selector)
	{
		JavascriptExecutor jsExec = (JavascriptExecutor)SeleniumScreenshotsGenerator.firefoxDriver;
		jsExec.executeScript("arguments[0].removeAttribute('style','border: 4px solid red;');", findPageElement(selector));
	}
	public Boolean typeIn(String selector, String contentText)
	{
		findPageElement(selector).sendKeys(contentText);
		return true;
	}
	public Boolean clickBtn(String selector)
	{
		findPageElement(selector).click();
		return true;
	}
	public Boolean select(String selector, String option)
	{
		Select selectBox = new Select(findPageElement(selector));
		selectBox.selectByVisibleText(option);
		return true;
	}
	public Boolean pressEnter()
	{
		findPageElement("button[type='submit']").click();
		return true;
	}
	public void restartBrowser() {
	    SeleniumScreenshotsGenerator.firefoxDriver.manage().deleteAllCookies();         // Clear Cookies on the browser
	    SeleniumScreenshotsGenerator.firefoxDriver.quit();
	    SeleniumScreenshotsGenerator.firefoxDriver = null;
	    SeleniumScreenshotsGenerator.firefoxDriver = new FirefoxDriver();
	
	}
	public void closeBrowser()
	{
		SeleniumScreenshotsGenerator.firefoxDriver.close();
	}
}
